scripts_lst <- suppressWarnings(scripts_loader(file_vec))
x = scripts_lst
stopifnot(class(x)=='list')
# internal functions
func_arguments_extractor <- function(x){
#-- placeholder
func_args_lst <- list()
l_bracket_cnt <- 0
r_bracket_cnt <- 0
#- vector of chars
x_stp <- strsplit(x, split='')[[1]]
s_ind <- 1
j <- 1
for(i in seq_along(x_stp)){
if(x_stp[i] == "("){
l_bracket_cnt <- l_bracket_cnt + 1
}
if(x_stp[i] == ")"){
r_bracket_cnt <- r_bracket_cnt + 1
}
if(x_stp[i] == "," & l_bracket_cnt == r_bracket_cnt){
func_args_lst[[j]] <- trimws(paste0(x_stp[s_ind:(i-1)], collapse = ""))
s_ind <- i + 1
j <- j + 1
}
if(i == length(x_stp))
func_args_lst[[j]] <- trimws(paste0(x_stp[s_ind:i], collapse = ""))
}
func_args_lst
}
func_body_extractor <- function(x){
brackets_cnt <- 1
for(i in seq_len(length(x))){
brackets_cnt <- brackets_cnt + stri_count(x[i], fixed = '{')
brackets_cnt <- brackets_cnt - stri_count(x[i], fixed = '}')
if(!brackets_cnt)
break
}
x[1:(i-1)]
}
# TODO: removing quotated strings - function names can be there
funcs_startpoints <- function(x, funcs_nams = NULL){
# arguments tests
stopifnot(length(x)>0)
stopifnot(!is.null(funcs_nams))
for(i in seq(x)){
# temporary commentaries removal in order to prevent detecting false functions startpoints
y <- stri_replace_all(x[[i]], regex = "#.*", replacement = "")
# looking for functions evaluations and building map
for(z in funcs_nams){
ind <- which(stri_detect(y, regex = paste0("((\\s|\\A)|(-|=))",z,"\\s*\\(")))
if(length(ind))
eval(parse(text = paste0('ec__',z,"@evals[[length(",paste0('ec__',z,"@evals"),")+1]] <<- list('script' = \"",names(x)[i],"\", 'lines' = c(",paste0(ind, collapse =','),"))")))
}
}
return(invisible(NULL))
}
# loop over list of R scripts
funcs_names_lst <- lapply(seq_along(x), function(i){
if(is.character(x[[i]]) && any(nchar(x[[i]])>0)){
line_chars <- nchar(x[[i]])
#-- functions locations
funcs_loc_ind <- which(stri_detect(x[[i]], regex = "\\s*<-\\s*function\\("))
#- functions names, arguments and body (if some definitions are not unique I will add artificial ID) - POZNIEJ
if(length(funcs_loc_ind)){
res_lst <- list()
it <- 0
for(j in funcs_loc_ind){
it <- it + 1
#-- function name
func_name <- trimws(stri_extract_first(x[[i]][j],regex = "(\\A|\\s)[^\\s]+(?=(\\s*<-\\s*function))"))
res_lst[[it]] <- func_name
#-- function arguments list
func_args <- func_arguments_extractor(x = stri_extract_first(x[[i]][j],regex = "(?<=\\().+(?=\\))"))
#-- function body
#-- finding line where "{" sign appeard - maybe should be more sophisticated
k <- min(which(stri_detect_fixed(x[[i]][j:length(x[[i]])], pattern = "{")))
func_body <- func_body_extractor(x = x[[i]][(j+k):length(x[[i]])])
body_str <- paste0(func_body, collapse = ";")
body_str <- stri_replace_all(body_str, fixed = "'", replacement = "\\'")
body_str <- stri_replace_all(body_str, fixed = "\"", replacement = '\"')
txt <- paste0("ec__",func_name," <<- ec_function(","args = list(",paste0("\"",paste0(func_args, collapse = "\", \""),"\""),")",
paste0(", body = '",body_str,"'",', source = \"',names(x)[i],'\",','range = c(start = ',j, ', end = ',j+length(func_body),'))'))
eval(parse(text = txt))
}
res_lst
}else{
NULL
}
}else{
NULL
}
})
funcs_names_vec <- unlist(funcs_names_lst)
# startpoints
funcs_startpoints(x, funcs_nams = funcs_names_vec)
# linker
x = funcs_names_vec
stopifnot(length(x)>0)
# data frame of ranges and source scripts
func_ec_dfr <- do.call('rbind', lapply(x, function(yy){
yy1 <- eval(parse(text = paste0('ec__',yy)))
data.frame('function' = yy, 'source' = yy1@source, 'range_start' = yy1@range[1], 'range_end' = yy1@range[2])
}))
yy = x[[67]]
yy
yy1 <- eval(parse(text = paste0('ec__',yy)))
x_children <- unique(unlist(lapply(yy1@evals, function(zz){
x[which(apply(cbind(func_ec_dfr$source == zz$script,
sapply(zz$lines,function(ii){func_ec_dfr$range_start <= ii}),
sapply(zz$lines,function(ii){func_ec_dfr$range_end >= ii})),1,'all'))]
})))
x_children
x_children
yy1@evals
zz = yy1@evals[[1]]
x[which(apply(cbind(func_ec_dfr$source == zz$script,
sapply(zz$lines,function(ii){func_ec_dfr$range_start <= ii}),
sapply(zz$lines,function(ii){func_ec_dfr$range_end >= ii})),1,'all'))]
zz$script
func_ec_dfr$source
# data frame of ranges and source scripts
func_ec_dfr <- do.call('rbind', lapply(x, function(yy){
yy1 <- eval(parse(text = paste0('ec__',yy)))
data.frame('function' = yy, 'source' = yy1@source, 'range_start' = yy1@range[1], 'range_end' = yy1@range[2])
}))
# data frame of ranges and source scripts
func_ec_dfr
yy1 <- eval(parse(text = paste0('ec__',yy)))
x_children <- unique(unlist(lapply(yy1@evals, function(zz){
x[which(apply(cbind(func_ec_dfr$source == zz$script,
sapply(zz$lines,function(ii){func_ec_dfr$range_start <= ii}),
sapply(zz$lines,function(ii){func_ec_dfr$range_end >= ii})),1,'all'))]
})))
x_children
length(x_children)
x_children
yy
remove(list = ls())
gc()
#-- assumptions
# 1. functions are unique
source("code_parser.R")
x = c("D:/school/
x = c("D:/school/dokt/thesis/code/")
explain(x)
ec__mcl
remove(list = ls())
gc()
#-- assumptions
# 1. functions are unique
source("code_parser.R")
x = c("D:/school/dokt/thesis/code/")
explain(x)
remove(list = ls())
gc()
#-- assumptions
# 1. functions are unique
source("code_parser.R")
x = c("D:/school/dokt/thesis/code/")
explain(x)
ec__mcl
remove(list = ls())
gc()
#-- assumptions
# 1. functions are unique
source("code_parser.R")
x = c("D:/school/dokt/thesis/code/")
explain(x)
ec__mcl
ec__mcl
ec_env()
install.packages(c("igraph", "visNetwork"))
explain_env
print(explain_env)
print(explain_env)[1]
ec_funcs_extractor <- function(x){
# argument tests
stopifnot(class(x)=='list')
# internal functions
func_arguments_extractor <- function(x){
#-- placeholder
func_args_lst <- list()
l_bracket_cnt <- 0
r_bracket_cnt <- 0
#- vector of chars
x_stp <- strsplit(x, split='')[[1]]
s_ind <- 1
j <- 1
for(i in seq_along(x_stp)){
if(x_stp[i] == "("){
l_bracket_cnt <- l_bracket_cnt + 1
}
if(x_stp[i] == ")"){
r_bracket_cnt <- r_bracket_cnt + 1
}
if(x_stp[i] == "," & l_bracket_cnt == r_bracket_cnt){
func_args_lst[[j]] <- trimws(paste0(x_stp[s_ind:(i-1)], collapse = ""))
s_ind <- i + 1
j <- j + 1
}
if(i == length(x_stp))
func_args_lst[[j]] <- trimws(paste0(x_stp[s_ind:i], collapse = ""))
}
func_args_lst
}
func_body_extractor <- function(x){
brackets_cnt <- 1
for(i in seq_len(length(x))){
brackets_cnt <- brackets_cnt + stri_count(x[i], fixed = '{')
brackets_cnt <- brackets_cnt - stri_count(x[i], fixed = '}')
if(!brackets_cnt)
break
}
x[1:(i-1)]
}
# TODO: removing quotated strings - function names can be there
funcs_startpoints <- function(x, funcs_nams = NULL){
# arguments tests
stopifnot(length(x)>0)
stopifnot(!is.null(funcs_nams))
for(i in seq(x)){
# temporary commentaries removal in order to prevent detecting false functions startpoints
y <- stri_replace_all(x[[i]], regex = "#.*", replacement = "")
# looking for functions evaluations and building map
for(z in funcs_nams){
ind <- which(stri_detect(y, regex = paste0("((\\s|\\A)|(-|=))",z,"\\s*\\(")))
if(length(ind))
eval(parse(text = paste0('ec__',z,"@evals[[length(",paste0('ec__',z,"@evals"),")+1]] <<- list('script' = \"",names(x)[i],"\", 'lines' = c(",paste0(ind, collapse =','),"))")))
}
}
return(invisible(NULL))
}
funcs_linker <- function(x){
# arguments tests
stopifnot(length(x)>0)
# data frame of ranges and source scripts
func_ec_dfr <- do.call('rbind', lapply(x, function(yy){
yy1 <- eval(parse(text = paste0('ec__',yy)))
data.frame('function' = yy, 'source' = yy1@source, 'range_start' = yy1@range[1], 'range_end' = yy1@range[2])
}))
for(yy in x){
yy1 <- eval(parse(text = paste0('ec__',yy)))
x_parent <- unique(unlist(lapply(yy1@evals, function(zz){
x[which(apply(cbind(func_ec_dfr$source == zz$script,
sapply(zz$lines,function(ii){func_ec_dfr$range_start <= ii}),
sapply(zz$lines,function(ii){func_ec_dfr$range_end >= ii})),1,'all'))]
})))
if(length(x_parent)){
eval(parse(text = paste0('ec__',yy,'@parents <<- append(ec__',yy,'@parents,','\"',x_parent,'\")')))
for(xx in x_parent)
eval(parse(text = paste0('ec__',xx,'@children <<- append(ec__',xx,'@children,','\"',yy,'\")')))
}
}
}
#
funcs_names_lst <- lapply(seq_along(x), function(i){
if(is.character(x[[i]]) && any(nchar(x[[i]])>0)){
line_chars <- nchar(x[[i]])
#-- functions locations
funcs_loc_ind <- which(stri_detect(x[[i]], regex = "\\s*<-\\s*function\\("))
#- functions names, arguments and body (if some definitions are not unique I will add artificial ID) - POZNIEJ
if(length(funcs_loc_ind)){
res_lst <- list()
it <- 0
for(j in funcs_loc_ind){
it <- it + 1
#-- function name
func_name <- trimws(stri_extract_first(x[[i]][j],regex = "(\\A|\\s)[^\\s]+(?=(\\s*<-\\s*function))"))
res_lst[[it]] <- func_name
#-- function arguments list
func_args <- func_arguments_extractor(x = stri_extract_first(x[[i]][j],regex = "(?<=\\().+(?=\\))"))
#-- function body
#-- finding line where "{" sign appeard - maybe should be more sophisticated
k <- min(which(stri_detect_fixed(x[[i]][j:length(x[[i]])], pattern = "{")))
func_body <- func_body_extractor(x = x[[i]][(j+k):length(x[[i]])])
body_str <- paste0(func_body, collapse = ";")
body_str <- stri_replace_all(body_str, fixed = "'", replacement = "\\'")
body_str <- stri_replace_all(body_str, fixed = "\"", replacement = '\"')
txt <- paste0("ec__",func_name," <<- ec_function(","args = list(",paste0("\"",paste0(func_args, collapse = "\", \""),"\""),")",
paste0(", body = '",body_str,"'",', source = \"',names(x)[i],'\",','range = c(start = ',j, ', end = ',j+length(func_body),'))'))
eval(parse(text = txt))
}
res_lst
}else{
NULL
}
}else{
NULL
}
})
funcs_names_vec <- unlist(funcs_names_lst)
# startpoints
funcs_startpoints(x, funcs_nams = funcs_names_vec)
# linker
funcs_linker(x = funcs_names_vec)
#-- poprawic tworzenie srodowiska EC
explain_env <<- ec_env(lapply(unlist(funcs_names_lst), function(y){if(length(y)){paste0("ec__",y)}}))
return(invisible(NULL))
}
remove(list = ls())
gc()
#-- assumptions
# 1. functions are unique
source("code_parser.R")
x = c("D:/school/dokt/thesis/code/")
explain(x)
print(explain_env)
x = unlist(explain_env)[1:10]
unlist(explain_env)
# method unlist.explain_env
unlist.EcEnv <- function(x){
unlist(x@ec_names)
}
x = unlist(explain_env)[1:10]
x = unlist(explain_env)
explain_env
unlist.EcEnv <- function(x){
unlist(x@ec_names)
}
x = explain_env
x
unlist(x@ec_names)
remove(x)
remove(list = ls())
gc()
#-- assumptions
# 1. functions are unique
source("code_parser.R")
x = c("D:/school/dokt/thesis/code/")
explain(x)
print(explain_env)
unlist(explain_env)
# method unlist.explain_env
unlist.EcEnv <- function(x){
unlist(lapply(x@ec_names,"unlist"))
}
unlist(explain_env)[1:10]
unlist(explain_env)
explain_env
class(explain_env@ec_names)
unlist.EcEnv <- function(x){
unlist(x@ec_names)
}
unlist.EcEnv(explain_env)
unlist.EcEnv <- function(x){
unlist(x@ec_names)
}
class(explain_env)
unlist(explain_env)
# method unlist.explain_env
unlist.EcEnv <- function(x){
unlist(x@ec_names, recursive = T)
}
unlist(explain_env)
# method unlist.explain_env
unlist.EcEnv <- function(x){
unlist(x@ec_names, recursive = T, use.names = T)
}
unlist(explain_env)
unlist(explain_env)
# method unlist.explain_env
unlist.EcEnv <- function(x, recursive = T, use.names = T){
unlist(x@ec_names, recursive = recursive, use.names = use.names)
}
unlist(explain_env)
remove(list = ls())
gc()
#-- assumptions
# 1. functions are unique
source("code_parser.R")
x = c("D:/school/dokt/thesis/code/")
explain(x)
print(explain_env)
unlist(explain_env)
unlist(explain_env)[1:0]
unlist(explain_env)[1:10]
x = unlist(explain_env)[1:10]
x
eval(x[1])
eval(expression(x[1]))
eval(parse(text = x[1]))
y <- eval(parse(text = x[1]))
y
y <- eval(parse(text = x[2]))
y
y <- eval(parse(text = x[3]))
y
eval(parse(text = x[4]))
eval(parse(text = x[10]))
eval(parse(text = x[8]))
x = unlist(explain_env)
y <- eval(parse(text = x[67]))
y
i = 67
y <- eval(parse(text = x[i]))
y
x[i]
gsub('ec__','',x)
x_true <- gsub('ec__','',x)
i = 67
cbind(y@parents,x_true[i])
rbind(cbind(y@parents,x_true[i]),cbind(x_true[i],y@children))
x_true <- gsub('ec__','',x)
edge_mat <- do.call('rbind',lapply(seq(x), function(i){
y <- eval(parse(text = x[i]))
rbind(cbind(y@parents,x_true[i]),cbind(x_true[i],y@children))
}))
i = 1
y <- eval(parse(text = x[i]))
y
rbind(cbind(y@parents,x_true[i]),cbind(x_true[i],y@children))
fun_prev <- y@parents
fun_prev
fun_next <- y@children
fun_next
prev_mat <- matrix()
prev_mat
y <- eval(parse(text = x[i]))
fun_prev <- y@parents
fun_next <- y@children
if(length(fun_prev))
prev_mat <- cbind(fun_prev,x_true[i])
if(length(fun_next))
next_mat <- cbind(x_true[i],fun_next)
next_mat
prev_mat
x_true <- gsub('ec__','',x)
edge_mat <- do.call('rbind',lapply(seq(x), function(i){
y <- eval(parse(text = x[i]))
fun_prev <- y@parents
fun_next <- y@children
if(length(fun_prev))
prev_mat <- cbind(fun_prev,x_true[i])
else
prev_mat <- c('','')
if(length(fun_next))
next_mat <- cbind(x_true[i],fun_next)
else
next_mat <- c('','')
rbind(prev_mat,next_mat)
}))
edge_mat
edge_mat[which(nchar(edge_mat[,1]) > 0 | nchar(edge_mat[,1]) > 0),]
igraph::graph_from_edgelist(edge_mat)
edge_mat
edge_mat <- edge_mat[which(nchar(edge_mat[,1]) > 0 | nchar(edge_mat[,1]) > 0),]
edge_mat
igraph::graph_from_edgelist(edge_mat)
fun_igh <- igraph::graph_from_edgelist(edge_mat)
fun_igh
graph_fun_igh <- igraph::graph_from_edgelist(edge_mat)
E(graph_fun_igh)$weight <- 1
graph_fun_igh <- igraph::graph_from_edgelist(edge_mat)
E(graph_fun_igh)$weight <- 1
E(graph_fun_igh)
graph_fun_igh <- igraph::graph_from_edgelist(edge_mat)
graph_fun_igh
E(graph_fun_igh)
igraph::E
igraph::E(graph_fun_igh)$weight <- 1
igraph::simplify(graph_fun_igh, remove.multiple = T, edge.attr.comb = 'sum')
graph_fun_igh <- igraph::simplify(graph_fun_igh, remove.multiple = T, edge.attr.comb = 'sum')
visIgraph(graph_fun_igh)
visNetwork::visIgraph(graph_fun_igh)
visNetwork::visIgraph(graph_fun_igh) %>% visNetwork::visLayout(hierarchical = T)
visNetwork::visIgraph(graph_fun_igh) igraph::%>% visNetwork::visLayout(hierarchical = T)
visNetwork::visIgraph(graph_fun_igh) visNetwork::%>% visNetwork::visLayout(hierarchical = T)
library(visNetwork)
visNetwork::visIgraph(graph_fun_igh) %>% visNetwork::visLayout(hierarchical = T)
visNetwork::visIgraph(graph_fun_igh) %>% visNetwork::visLayout(hierarchical = T) %>% visNetwork::visHierarchicalLayout(sortMethod = 'directed')
ec__mcl
remove(list = ls())
gc()
#-- assumptions
# 1. functions are unique
source("code_parser.R")
x = c("D:/school/dokt/thesis/code/")
explain(x)
print(explain_env)
ec__mcl
print(explain_env)
G <- ec_graph(x = unlist(explain_env))
ec_graph <- function(x){
x_true <- gsub('ec__','',x)
edge_mat <- do.call('rbind',lapply(seq(x), function(i){
y <- eval(parse(text = x[i]))
fun_prev <- y@parents
fun_next <- y@children
if(length(fun_prev))
prev_mat <- cbind(fun_prev,x_true[i])
else
prev_mat <- c('','')
if(length(fun_next))
next_mat <- cbind(x_true[i],fun_next)
else
next_mat <- c('','')
rbind(prev_mat,next_mat)
}))
edge_mat <- edge_mat[which(nchar(edge_mat[,1]) > 0 | nchar(edge_mat[,1]) > 0),]
if(dim(edge_mat)[1]){
graph_fun_igh <- igraph::graph_from_edgelist(edge_mat)
igraph::E(graph_fun_igh)$weight <- 1
graph_fun_igh <- igraph::simplify(graph_fun_igh, remove.multiple = T, edge.attr.comb = 'sum')
# library(visNetwork)
# visNetwork::visIgraph(graph_fun_igh) %>% visNetwork::visLayout(hierarchical = T) %>% visNetwork::visHierarchicalLayout(sortMethod = 'directed')
}
}
G <- ec_graph(x = unlist(explain_env))
G
visNetwork::visIgraph(G) %>% visNetwork::visLayout(hierarchical = T) %>% visNetwork::visHierarchicalLayout(sortMethod = 'directed')
visNetwork::visIgraph(G) %>% visNetwork::visLayout(hierarchical = T) %>% visNetwork::visHierarchicalLayout(sortMethod = 'directed')
